package dk.idconnect.backend.shared.fido.services;

import dk.idconnect.backend.shared.fido.dtos.CredentialOptionsRequestDto;
import dk.idconnect.backend.shared.fido.dtos.CredentialResponseDto;
import dk.idconnect.backend.shared.fido.dtos.DeviceDto;
import dk.idconnect.backend.shared.fido.enums.W2isServerEPType;
import lombok.extern.log4j.Log4j2;
import net.minidev.json.JSONArray;
import net.minidev.json.JSONObject;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.core.ParameterizedTypeReference;
import org.springframework.http.*;
import org.springframework.stereotype.Service;
import org.springframework.web.client.*;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

@Log4j2
@Service
public class WSO2Service {
    @Value("${idc.api.endpoint:http://localhost:8080}") private String idcApiEndpoint;
    @Value("${idc.idp.endpoint:https://localhost:9443}") private String idcIdpEndpoint;
    @Value("${idc.tenant:carbon.super}") private String idcTenant;

    private final RestTemplate restTemplate;

    public WSO2Service(@Qualifier("sslRestTemplate") RestTemplate restTemplate) {
        this.restTemplate = restTemplate;
    }

    /**
     * Retrieves FIDO devices linked to the account with the given token.
     * The token MUST be an authorization_code grant token (Browser login).
     * Otherwise, it will throw a 403.
     * @param authorization The token to query for FIDO devices eg. "Bearer 0fd3..."
     * @return A list of FIDO devices
     */
    public List<DeviceDto> getUserDevices(String authorization) {
        return execute(
                W2isServerEPType.GET_FIDO_DEVICES,
                authorization,
                new ParameterizedTypeReference<List<DeviceDto>>() {},
                null).getBody();
    }

    /**
     * Start registering a FIDO device
     * @param authorization Authorization header of the user
     * @return The credential JSON object to send to the client
     */
    public CredentialOptionsRequestDto startUserDeviceRegistration(String authorization) {
        return execute(
                W2isServerEPType.START_FIDO_REGISTRATION,
                authorization,
                new ParameterizedTypeReference<CredentialOptionsRequestDto>() {},
                "appId=" + idcApiEndpoint).getBody();
    }

    /**
     * Finish FIDO device registration
     * @param authorization Authorization header of the user
     * @param challengeResponse The challenge response generated by the user
     * @return A JSON object with the successful credential registration
     */
    public CredentialResponseDto finishUserDeviceRegistration(String authorization, CredentialResponseDto challengeResponse) {
        return execute(
                W2isServerEPType.FINISH_FIDO_REGISTRATION,
                authorization,
                new ParameterizedTypeReference<CredentialResponseDto>() {},
                challengeResponse).getBody();
    }

    /**
     * Delete a FIDO device
     * @param authorization Authorization header of the user
     * @param credential The ID of the credential to remove
     */
    public String deleteDeviceCredential(String authorization, String credential) {
         return execute(
                W2isServerEPType.DELETE_FIDO_DEVICE,
                authorization,
                new ParameterizedTypeReference<String>() {},
                null, new HashMap<>(){{ put("{credential}", credential); }}).getBody();
    }

    /**
     * Edit the name a FIDO device
     * @param authorization Authorization header of the user
     * @param credential The ID of the credential to remove
     * @param newName The new name for the device
     */
    public void editDeviceName(String authorization, String credential, String newName) {
             execute(
                W2isServerEPType.EDIT_FIDO_DEVICE,
                authorization,
                new ParameterizedTypeReference<Void>() {},
                new JSONArray(){{
                    add(new JSONObject(){{
                        put("operation","REPLACE");
                        put("path", "/displayName");
                        put("value", newName);
                    }}
                    );
                }}, new HashMap<>(){{ put("{credential}", credential); }}).getBody();
    }

    /**
     * Executes an API call based on the values passed into the method
     * @param w2isServerEPType The endpoint configuration that needs to be called
     * @param authorization This is the authorization that will be used as part of the API request
     * @param clazz The class to return
     * @param body The body to send to the endpoint
     * @return Returns the response from the server
     */
    public <R, T> ResponseEntity<R> execute(
            W2isServerEPType w2isServerEPType,
            String authorization,
            ParameterizedTypeReference<R> clazz,
            T body
    ) {
        return execute(w2isServerEPType, authorization, clazz, body, null);
    }

    /**
     * Executes an API call based on the values passed into the method
     * @param w2isServerEPType The endpoint configuration that needs to be called
     * @param authorization This is the authorization that will be used as part of the API request
     * @param clazz The class to return
     * @param body The body to send to the endpoint
     * @param tags Tags contain different values that the w2isServerEPType uses to replace part of the request
     * @return Returns the response from the server
     */
    public <R, T> ResponseEntity<R> execute(
            W2isServerEPType w2isServerEPType,
            String authorization,
            ParameterizedTypeReference<R> clazz,
            T body,
            Map<String, String> tags
    ) {
        HttpHeaders headers = new HttpHeaders();
        headers.set("Authorization", authorization);
        headers.set("Content-type", w2isServerEPType.getContentType());
        headers.set("Accept", "*/*");

        if (tags == null) tags = new HashMap<>();
        tags.put("{idpEndpoint}", idcIdpEndpoint);
        tags.put("{tenant}", idcTenant);

        String url = replaceChars(w2isServerEPType.getEndpoint(), tags);

        try {
            return restTemplate.exchange(
                    url,
                    HttpMethod.valueOf(w2isServerEPType.getMethod()),
                    new HttpEntity<>(body, headers),
                    clazz);
        } catch (HttpStatusCodeException e) {
            log.error(e.getMessage());
            return new ResponseEntity<>(e.getStatusCode());
        }
    }

    private String replaceChars(String value, Map<String, String> tags) {
        String replacedValue = value;
        for (Map.Entry<String, String> kv : tags.entrySet())
            replacedValue = replacedValue.replace(kv.getKey(), kv.getValue());

        return replacedValue;
    }
}
