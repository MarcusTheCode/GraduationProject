package dk.bm.fido.auth.controllers;

import dk.bm.fido.auth.external.dtos.CredentialOptionsRequestDto;
import dk.bm.fido.auth.external.dtos.CredentialResponseDto;
import dk.bm.fido.auth.external.services.WSO2Service;
import dk.bm.fido.auth.services.FrontEndService;
import org.springframework.http.MediaType;
import org.springframework.security.core.Authentication;
import org.springframework.security.oauth2.client.OAuth2AuthorizedClient;
import org.springframework.security.oauth2.client.annotation.RegisteredOAuth2AuthorizedClient;
import org.springframework.security.oauth2.core.OAuth2AccessToken;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RestController;

@RestController
public class RegistrationController {
    private final WSO2Service wso2Service;
    private final FrontEndService frontEndService;

    public RegistrationController(WSO2Service wso2Service, FrontEndService frontEndService) {
        this.wso2Service = wso2Service;
        this.frontEndService = frontEndService;
    }

    /**
     * Starts the process of registering a new FIDO2 device
     * @return The credential JSON object to send to the client
     */
    @PostMapping(value = "/register/start", produces = MediaType.APPLICATION_JSON_VALUE)
    public CredentialOptionsRequestDto registerStart(Authentication authentication) {
        String token = frontEndService.getAccessToken(authentication);

        return wso2Service.startUserDeviceRegistration(token);
    }

    /**
     * Finishes the process of registering a new device
     * @param authorizedClient the authorized client pulled from the authorization header
     * @param challengeResponse public key generated by FIDO2 to be associated with the user in wso2
     * @return A JSON object with the successful credential registration
     */
    @PostMapping(value = "/register/finish", produces = MediaType.APPLICATION_JSON_VALUE)
    public CredentialResponseDto registerFinish(Authentication authentication, @RequestBody CredentialResponseDto challengeResponse) {
        String token = frontEndService.getAccessToken(authentication);

        return wso2Service.finishUserDeviceRegistration(token, challengeResponse);
    }
}
